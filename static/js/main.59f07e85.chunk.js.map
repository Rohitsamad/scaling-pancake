{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","Login","className","onClick","provider","GoogleAuthProvider","signInWithPopup","Logout","currentUser","signOut","Room","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","displayName","add","text","chat","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","Displaymsg","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,oDACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAuB3B,SAASC,IAOP,OACE,mCACE,wBAAQC,UAAU,UAAUC,QAPP,WACvB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAKnB,iCAMN,SAASG,IACP,OAAOR,EAAKS,aACV,wBAAQN,UAAU,WAAWC,QAAS,kBAAMJ,EAAKU,WAAjD,qBAKJ,SAASC,IACP,IAAMC,EAAQC,mBACRC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,QAAQC,MAAM,IAHlC,EAKKC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALO,sBAOoBC,mBAAS,IAP7B,mBAOPC,EAPO,KAOIC,EAPJ,KAURC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGW5B,EAAKS,YAA1BoB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,YAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,KAAM1C,IAASU,UAAUiC,WAAWC,kBACpCN,MACAC,gBATgB,OAYlBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OAAQ,qCACN,iCAEGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAAyBC,QAASF,GAAjBA,EAAIG,OAEtD,sBAAMC,IAAKhC,OAIb,uBAAMiC,SAAUpB,EAAhB,UAEE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QAAQG,YAAY,iBAEpF,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,wBAON,SAASkB,EAAWW,GAAQ,IAAD,EACUA,EAAMV,QAAjCV,EADiB,EACjBA,KAAMH,EADW,EACXA,IAERwB,GAHmB,EACNvB,YAEED,IAAQ7B,EAAKS,YAAYoB,IAAM,OAAS,YAE7D,OAAQ,mCACN,qBAAK1B,UAAS,kBAAakD,GAA3B,SACA,4BAAIrB,QAMOsB,MAnGf,WAAgB,IAAD,EAEEC,YAAavD,GAArBwD,EAFM,oBAIb,OACE,sBAAKrD,UAAU,MAAf,UACE,iCACE,cAACK,EAAD,MAGF,kCACGgD,EAAO,cAAC7C,EAAD,IAAW,cAACT,EAAD,UCzBZuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.59f07e85.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDrfd2oRXpaTumeEu-l5bO7EayIQEqBYMU\",\n  authDomain: \"message-e8668.firebaseapp.com\",\n  databaseURL: \"https://message-e8668-default-rtdb.firebaseio.com\",\n  projectId: \"message-e8668\",\n  storageBucket: \"message-e8668.appspot.com\",\n  messagingSenderId: \"654321921638\",\n  appId: \"1:654321921638:web:4949da5aff249122f4c7a7\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Logout />\n      </header>\n\n      <section>\n        {user ? <Room /> : <Login />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction Login() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>login with Google</button>\n    </>\n  )\n\n}\n\nfunction Logout() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Log Out</button>\n  )\n}\n\n\nfunction Room() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('chat').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, displayName } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      chat: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      displayName\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <Displaymsg key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"type message\" />\n\n      <button type=\"submit\" disabled={!formValue}>send</button>\n\n    </form>\n  </>)\n}\n\n\nfunction Displaymsg(props) {\n  const { text, uid, displayName } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n    <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}